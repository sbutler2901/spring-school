buildscript {
  ext {
    springBootVersion = '2.0.2.RELEASE'
  }
  repositories {
          //mavenCentral()
          jcenter()
  }
  dependencies {
          classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
          classpath "com.bmuschko:gradle-docker-plugin:3.2.8"
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

group = 'me.sbsoftware'
version = '0.1.0'
sourceCompatibility = 1.8

dependencies {
        // Spring
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web') 
	testCompile('org.springframework.boot:spring-boot-starter-test')

	//compile('org.springframework.boot:spring-boot-starter-security')
	//testCompile('org.springframework.security:spring-security-test')
       
        // Database 
        // for running with persistent, external mariadb
        compile("org.mariadb.jdbc:mariadb-java-client:2.2.4")   
        // for running with embedded db
	//runtime('com.h2database:h2')
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork
import com.bmuschko.gradle.docker.DockerRegistryCredentials

def containerNetwork = 'school-net'
def dbPass = "$System.env.DB_PASS"
def dbName = "$System.env.DB_NAME"

task buildSchoolImage(type: DockerBuildImage) {
  dependsOn build
  tag = "sbutler2901/spring-school:${project.version}"
  inputDir = projectDir
}

task removeSchoolNetwork(type: DockerRemoveNetwork) {
  println "removing school network1"
  targetNetworkId { containerNetwork }
  onError { exception ->
      if (exception.message.contains('not found')) {
          println 'Docker Network not found.'
      }
  }
}

task createSchoolNetwork(type: DockerCreateNetwork, dependsOn: [removeSchoolNetwork]) {
  networkId = containerNetwork
}

task stopDBContainer(type: DockerStopContainer) {
  targetContainerId { createDBContainer.getContainerName() }
  onError { exception ->
    if (true) {} else if (exception.message.contains('No such container')) {
          println 'Container not running'
    } else {
      throw exception
    }
  }
}

task removeDBContainer(type: DockerRemoveContainer, dependsOn: [stopDBContainer]) {
  targetContainerId { createDBContainer.getContainerName() }
  onError { exception ->
    if (exception.message.contains('No such container')) {
      println 'Container not running'
      removeSchoolNetwork
    } else {
      throw exception
    }
  }
  onComplete {
    println 'removing school network0'
    removeSchoolNetwork
  }
}

task createDBContainer(type: DockerCreateContainer, dependsOn: [removeDBContainer, createSchoolNetwork]) {
    targetImageId { 'mariadb:latest' }
    containerName "spring-mariadb"
    portBindings = ['3306:3306']
    network containerNetwork
    env = ["MYSQL_ROOT_PASSWORD=${dbPass}", "MYSQL_DATABASE=${dbName}"]
}

task startDBContainer(type: DockerStartContainer, dependsOn: [createDBContainer]) {
  targetContainerId { createDBContainer.getContainerId() }
}

task createSchoolContainer(type: DockerCreateContainer, dependsOn: [buildSchoolImage, createDBContainer]) {
    targetImageId { buildImage.getImageId() }
    portBindings = ['8080:8080']
    tty = false
}

task pushImage(type: DockerPushImage) {
  imageName = "sbutler2901/spring-school"
  tag = "${project.version}"
  registryCredentials = new DockerRegistryCredentials()
  registryCredentials.username = "sbutler2901"
  registryCredentials.password = "$System.env.DOCKERHUB_PASS"
}
